// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  title String
  description String
  colour String
  image String
  slug String @unique
  products Product[]

}

model Product{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  title String
  description String
  colour String
  image String?
  price Float
  isFeatured Boolean  @default(false)
  options Json[]
  categorySlug String
  category Category   @relation(fields: [categorySlug], references: [slug])
}

model Order{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userEmail String 
  price Float
  products Json[]
  status String
  intentId String? @unique
  user      User @relation(fields: [userEmail], references: [email])
  
}
model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   
  access_token       String?   
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?    @db.String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean @default(false)
  active         Boolean         @default(false) 
  activateTokens VerificationToken[]
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationToken {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  userId       String @db.ObjectId
  user   User @relation(fields: [userId], references: [id])

}

